#include <vector>
#include <cmath>

class Solution {
public:

bool not_clash(int i,int j,vector<vector<char>>& board,char num, int n)
{
    for(int k=0;k<n;k++)
    {
        if(board[i][k]==num)
            return false; // checking for duplicate in row
        
        if(board[k][j]==num)
            return false; // checking for duplicate in column
    }        

        int s = sqrt(n);
        int row = i - i % s;
        int column = j - j % s;

        for(int r = row; r < row + s; r++)
        {
            for(int c = column; c< column + s; c++)
            {
                if(board[r][c]==num)
                    return false;
            }
        }
    return true;
}

    bool solve_board(vector<vector<char>>& board, int n)
    {
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(board[i][j]=='.')
                {
                    for(char num='1';num<='9';num++)
                    {
                        if(not_clash(i,j,board,num,n))
                        {
                        board[i][j]=num;
                        if(solve_board(board,n))
                        return true;
                        board[i][j]='.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    void solveSudoku(vector<vector<char>>& board) {
        int n = board.size();
        solve_board(board,n);
    }
};
