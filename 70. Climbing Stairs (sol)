***********************Solution-1)=>memotization*************************
class Solution {
public:
    int climbStairs(int n) {
        unordered_map<int,int>memo;
        return climbStairs(n,memo);
    }

    int climbStairs(int n, unordered_map<int, int>& memo)
    {
        if(n==0 || n==1)
        {
            return 1;
        }

        if(memo.find(n) == memo.end())
        {
            memo[n] = climbStairs(n-1, memo) + climbStairs(n-2,memo);
        }
        return memo[n];
    }
};
***********************Solution-2)=>tabulation*************************
class Solution {
public:
    int climbStairs(int n) {
        if(n==0 || n==1)
        {
            return 1;
        }

        vector<int>dp(n+1);
        dp[0]=dp[1]=1;

        for(int i=2;i<=n;i++)
        {
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
};
***********************Solution-2)=>space optimization*************************
class Solution {
public:
    int climbStairs(int n) {
        if(n==0 || n==1)
        {
            return 1;
        } 

        int prev=1;
        int curr=1;
        for(int i=2;i<=n;i++)
        {
            int temp=curr;
            curr=prev+curr;
            temp=prev;
        }
        return curr;
    }
};
