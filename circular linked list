#include<iostream>
using namespace std;

class Node
{
    public:
    int data;
    Node* next;
    
    //constructor
    Node(int d)
    {
        this->data=d;
        this->next=NULL;
    }
    
    ~Node()
    {
        int value=this->data;
        while(this->next!=NULL)
        {
            delete next;
            next=NULL;
        }
        cout<<"memory is free for node with data:"<<value<<endl;
    }
};

void insertnode(Node* &tail,int element,int d)
{
    if(tail==NULL)
    {
        Node* newnode = new Node(d);
        tail=newnode;
        newnode->next=newnode;
    }
    
    else
    {
        Node* curr = tail;
        
        while(curr->data!=element)
        {
            curr=curr->next;
        }
        
        Node* temp = new Node(d);
        temp->next=curr->next;
        curr->next=temp;
    }
}

void printnode(Node* &tail)
{
    Node* temp = tail;
    
    if(tail==NULL)
    {
        cout<<"list is empty"<<endl;
        return;
    }
    
    do
    {
        cout<<tail->data<<" ";
        tail=tail->next;
    }
    while(tail!=temp);
    cout<<endl;
}

void deletenode(Node* &tail,int value)
{
    if(tail==NULL)
    {
        cout<<"linked list is already empty"<<endl;
        return;
    }
    
    Node* prev = tail;
    Node* curr = prev->next;
    
    while(curr->data!=value)
    {
        prev=curr;
        curr=curr->next;
    }
    
    prev->next=curr->next;
    
    //for 1 node
    if(curr==prev)
    {
        tail=NULL;
    }
    //for >=2 node
    else if(tail==curr)
    {
        tail=prev;
    }
    curr->next=NULL;
    delete curr;
}

int main()
{
    Node* tail = NULL;
    
    insertnode(tail,5,3);
    printnode(tail);
    /*
    insertnode(tail,3,5);
    printnode(tail);
    insertnode(tail,5,7);
    printnode(tail);
    insertnode(tail,7,9);
    printnode(tail);
    insertnode(tail,5,6);
    printnode(tail);
    insertnode(tail,9,10);
    printnode(tail);
    insertnode(tail,3,4);
    printnode(tail);
    deletenode(tail,3);
    printnode(tail);
    */
    deletenode(tail,3);
    printnode(tail);
    return 0;
}
