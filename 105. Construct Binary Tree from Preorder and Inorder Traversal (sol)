/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

int curr=0;

TreeNode* help(vector<int>& preorder, vector<int>& inorder, int inLeft, int inRight)
{
    if(inLeft>inRight)
    {
        return NULL;
    }

    auto ans = new TreeNode(preorder[curr]);

    int ind = find(inorder.begin(), inorder.end(), preorder[curr]) - inorder.begin();
    curr++;

    ans->left = help(preorder, inorder, inLeft, ind-1);
    ans->right = help(preorder, inorder, ind+1, inRight);
    return ans;
}

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return help(preorder, inorder, 0, inorder.size()-1);
    }
};
